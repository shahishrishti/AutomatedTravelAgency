package com.capg.travelagency.presentation;


import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.BeforeClass;
import org.junit.Test;

import com.capg.travelagency.exceptions.InvalidRouteDataException;


public class RouteControllerTest {

	private static Logger logger;
	private static RouteController routeController;
	
	@BeforeClass
	public static void setUp() {
		logger = LogManager.getLogger(RouteControllerTest.class.getName());
		routeController = new RouteController();
	}
	
	@Test(expected = InvalidRouteDataException.class)
	public void testAddRouteInvalidrouteID() {
		logger.info("[start] testAddRouteInvalidrouteID()");
//		try {
//			routeController.addRoute(-3567);
//			throw new InvalidRouteDataException("routeID. cannot be negative or zero.");
//		} catch(InvalidRouteDataException invalidRouteDataException) {
//			logger.error("routeID. cannot be negative or zero.");
//		}
		logger.info("[end] testAddRouteInvalidrouteID()");
	}
	
	
	
	@Test
	public void testAddRouteValidrouteID() throws InvalidRouteDataException {
		logger.info("[start] testAddRouteValidrouteID()");
//		assertNotNull("Item Found", routeController.AddRoute(3567,  ...));
		logger.info("[end] testAddRouteValidrouteID()");
	}
	
	@Test(expected = InvalidRouteDataException.class)
	public void testViewRouteInvalidrouteID() throws InvalidRouteDataException {
		logger.info("[start] testViewRouteInvalidrouteID()");
//		try {
//			ViewRoute(-3567,  ...)
//			throw new InvalidRouteDataException("routeID. cannot be negative or zero.");
//		} catch(InvalidRouteDataException invalidRouteDataException) {
//			logger.error("routeID. cannot be negative or zero.");
//		}
		logger.info("[end] testViewRouteInvalidrouteID()");
	}
	
	@Test
	public void testViewRouteValidrouteID() throws InvalidRouteDataException {
		logger.info("[start] testViewRouteValidrouteID()");
//		assertNotNull("Item Found", routeController.ViewRoute(3567,  ...));
		logger.info("[end] testViewRouteValidrouteID()");
	}
	
	@Test(expected = InvalidRouteDataException.class)
	public void testADDRouteInvalidsource() throws InvalidRouteDataException {
		logger.info("[start] testAddRouteInvalidsource()");
//		try {
//		AddRoute(3567, null, ...)
//			throw new InvalidRouteDataException("source cannot be null.");
//		} catch(InvalidRouteDataException invalidRouteDataException) {
//			logger.error("routeID. cannot be negative or zero.");
//		}
		logger.info("[end] testAddRouteInvalidsource()");
	}
	
	@Test
	public void testAddRouteValidsource() throws InvalidRouteDataException {
		logger.info("[start] testAddRouteValidsource()");
//		assertNotNull("Item Found", routeController.AddRoute(3567, "Nagpur", ...));
		logger.info("[end] testAddRouteValidrouteID()");
	}
	
	
	@Test(expected = InvalidRouteDataException.class)
	public void testViewRouteInvalidsource() throws InvalidRouteDataException {
		logger.info("[start] testViewRouteInvalidsource()");
//		try {
//		ViewRoute(3567, null, ...)
//			throw new InvalidRouteDataException("source cannot be null.");
//		} catch(InvalidRouteDataException invalidRouteDataException) {
//			logger.error("routeID. cannot be negative or zero.");
//		}
		logger.info("[end] testViewRouteInvalidsource()");
	}
	
	@Test
	public void testViewRouteValidsource() throws InvalidRouteDataException {
		logger.info("[start] testViewRouteValidsource()");
//		assertNotNull("Item Found", routeController.ViewRoute(3567, "Nagpur", ...));
		logger.info("[end] testViewRouteValidrouteID()");
	}
	
	@Test(expected = InvalidRouteDataException.class)
	public void testAddRouteInvaliddestination() throws InvalidRouteDataException {
		logger.info("[start] testAddRouteInvaliddestination()");
//		try {
//		AddRoute(3567, "Nagpur",null ...)
//			throw new InvalidRouteDataException("destination cannot be null.");
//		} catch(InvalidRouteDataException invalidRouteDataException) {
//			logger.error("routeID. cannot be negative or zero.");
//		}
		logger.info("[end] testAddRouteInvaliddestination()");
	}
	
	@Test
	public void testAddRouteValiddestination() throws InvalidRouteDataException {
		logger.info("[start] testAddRouteValiddestination()");
//		assertNotNull("Item Found", routeController.AddRoute(3567, "Nagpur", "Mumbai",...));
		logger.info("[end] testAddRouteValidrouteID()");
	}
	
	
	@Test(expected = InvalidRouteDataException.class)
	public void testViewRouteInvaliddestination() throws InvalidRouteDataException {
		logger.info("[start] testViewRouteInvaliddestination()");
//		try {
//		ViewRoute(3567, "Nagpur",null ...)
//			throw new InvalidRouteDataException("destination cannot be null.");
//		} catch(InvalidRouteDataException invalidRouteDataException) {
//			logger.error("routeID. cannot be negative or zero.");
//		}
		logger.info("[end] testViewRouteInvaliddestination()");
	}
	
	@Test
	public void testViewRouteValiddestination() throws InvalidRouteDataException {
		logger.info("[start] testViewRouteValiddestination()");
//		assertNotNull("Item Found", routeController.ViewRoute(3567, "Nagpur", "Mumbai",...));
		logger.info("[end] testViewRouteValidrouteID()");
	}
	
	@Test(expected = InvalidRouteDataException.class)
	public void testAddRouteInvalidduration() throws InvalidRouteDataException {
		logger.info("[start] testAddRouteInvalidrouteID()");
//		try {
//			AddRoute(3567, "Nagpur", "Mumbai", -11:20:34,...);
//			throw new InvalidRouteDataException("duration cannot be negative or zero.");
//		} catch(InvalidRouteDataException invalidRouteDataException) {
//			logger.error("duration cannot be negative or zero.");
//		}
		logger.info("[end] testAddRouteInvalidrouteID()");
	}
	
	@Test
	public void testAddRouteValidduration() throws InvalidRouteDataException {
		logger.info("[start] testAddRouteValidrouteID()");
//		assertNotNull("Item Found", routeController.AddRoute(3567, "Nagpur", "Mumbai", 11:20:34,...));
		logger.info("[end] testAddRouteValidrouteID()");
	}
	
	@Test(expected = InvalidRouteDataException.class)
	public void testViewRouteInvalidduration() throws InvalidRouteDataException {
		logger.info("[start] testViewRouteInvalidrouteID()");
//		try {
//			ViewRoute(3567, "Nagpur", "Mumbai", -11:20:34,...);
//			throw new InvalidRouteDataException("duration cannot be negative or zero.");
//		} catch(InvalidRouteDataException invalidRouteDataException) {
//			logger.error("duration cannot be negative or zero.");
//		}
		logger.info("[end] testViewRouteInvalidrouteID()");
	}
	
	@Test
	public void testViewRouteValidduration() throws InvalidRouteDataException {
		logger.info("[start] testViewRouteValidrouteID()");
//		assertNotNull("Item Found", routeController.ViewRoute(3567, "Nagpur", "Mumbai", 11:20:34,...));
		logger.info("[end] testViewRouteValidrouteID()");
	}
	
	@Test(expected = InvalidRouteDataException.class)
	public void testAddRouteInvaliddistance() throws InvalidRouteDataException {
		logger.info("[start] testAddRouteInvalidrouteID()");
//		try {
//			AddRoute(3567, "Nagpur", "Mumbai", 11:20:34,-200...);
//			throw new InvalidRouteDataException("distance cannot be negative or zero.");
//		} catch(InvalidRouteDataException invalidRouteDataException) {
//			logger.error("distance cannot be negative or zero.");
//		}
		logger.info("[end] testAddRouteInvalidrouteID()");
	}
	
	@Test
	public void testAddRouteValiddistance() throws InvalidRouteDataException {
		logger.info("[start] testAddRouteValidrouteID()");
//		assertNotNull("Item Found", routeController.AddRoute(3567, "Nagpur", "Mumbai", 11:20:34,200...));
		logger.info("[end] testAddRouteValidrouteID()");
	}
	
	@Test(expected = InvalidRouteDataException.class)
	public void testViewRouteInvaliddistance() throws InvalidRouteDataException {
		logger.info("[start] testViewRouteInvalidrouteID()");
//		try {
//			ViewRoute(3567, "Nagpur", "Mumbai", 11:20:34,-200...);
//			throw new InvalidRouteDataException("distance cannot be negative or zero.");
//		} catch(InvalidRouteDataException invalidRouteDataException) {
//			logger.error("distance cannot be negative or zero.");
//		}
		logger.info("[end] testViewRouteInvalidrouteID()");
	}
	
	@Test
	public void testViewRouteValiddistance() throws InvalidRouteDataException {
		logger.info("[start] testViewRouteValidrouteID()");
//		assertNotNull("Item Found", routeController.ViewRoute(3567, "Nagpur", "Mumbai", 11:20:34,200...));
		logger.info("[end] testViewRouteValidrouteID()");
	}
}

